/*

Interprocess Communication (IPC) (allows processes to exchange data)
01.Shared memory   (Processes share a common memory space, enabling fast data exchange.)
02.Message Passing  (Processes send and receive messages, ensuring structured communication.)


Synchronization is crucial in IPC to manage process execution order and prevent conflicts. 
It ensures consistency and avoids race conditions,
often using mechanisms like semaphores, mutexes, or monitors.

key differences between Shared Memory and Message Passing
Shared Memory :  Faster , more complex, suitable for large exchanges, process share a common memory space
Message Passing : Low Speed, simple, suitable for small exchanges, processes send and receive messages

*/


//send

code:[2021ict112@fedora ~]$ touch send.c
[2021ict112@fedora ~]$ vi send.c



#include<stdio.h>
#include<sys/ipc.h>
#include<sys/msg.h>
#define MAX 10

//Structure for message queues
struct mesg_buffer
{
	long mesg_type;
	char mesg_text[100];
}
message;

int main()
{
//key_t is a data type used for System V IPC mechanisms like shared memory, message queues, and semaphores
key_t key;
int msgid;
//ftok to generate unique key
key = ftok("profile", 65);
//msgget creates a message queue
// and returns identifier
msgid = msgget(key, 0666 |  IPC_CREAT );
//msgid : It’s used to reference a specific message queue.
//msgget(): A system call in C that creates or accesses a message queue.
//key: A unique identifier for the message queue, used to distinguish different queues.
//0.666: This seems unusual—normally, flags like IPC_CREAT or permissions (e.g., 0666) are used here. It may be a typo.
//IPC_CREAT:  system to create a new message queue if one with the given key doesn’t already exist.
message.mesg_type=1;
printf("Write Data : ");
fgets(message.mesg_text,MAX,stdin);

//msgsnd to send message
msgsnd(msgid, &message, sizeof(message), 0);

//display the message
printf("Data send is : %s \n", message.mesg_text);
return 0;

}

[2021ict112@fedora ~]$ gcc send.c -o send
[2021ict112@fedora ~]$ ./send
Write Data : hi S
Data send is : hi S


//receive 

[2021ict112@fedora ~]$ vi receive.c

#include <stdio.h>  //It provides functionalities for input and output operations, such as reading from standard input (scanf) and writing to standard output (printf). 
#inlcude <sys/ipc.h>  //This header defines macros and data structures for interprocess communication
#include <sys/msg.h> //Specifically related to System V message queues, this header allows processes to send and receive messages asynchronously. It provides functions like msgget(), msgsnd(), and msgrcv().

//structure for message queue
struct mesg_buffer
{
	
	long mesg_type;
	char mesg_text[100];
}
message;

int main()
{
	key_t key;
	int msgid;

//ftok to generate unique key
key = ftok("progfile",65);

//msgget creates a message queue
// and returns identifier
msgid = msgget (key, 0666 | IPC_CREAT);

//msgrcv to receive message
msgrcv(msgid, &message, sizeof(messages), 1, 0);

//display the message
printf("Data Received is : %s \n" , message.mesg_text);

//to destroy the message queue
msgct1(msgid, IPC_RMID, NULL);

return 0;

}

[2021ict112@fedora ~]$ gcc receive.c -o receive
[2021ict112@fedora ~]$ ./receive
[2021ict112@fedora ~]$ ./receive
Data Received is : data na



