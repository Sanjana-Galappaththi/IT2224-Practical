//Homework

touch /tmp/112progfile

//message send file

[2021ict112@fedora ~]$ touch /tmp/112profile
[2021ict112@fedora ~]$ touch newsend.c
[2021ict112@fedora ~]$ vi newsend.c

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#define MAX 10

struct msg_buffer{
	long msg_type;
	char msg_text[100];
}message;

int main(){
	key_t key;
	int msgid;
	
	//ftok to generate unique key
	key = ftok("/tmp/75progfile", 122); //0-255 arbitary number
	
	//msgget creates a message queue and returns identifier
	msgid = msgget(key, 0666 | IPC_CREAT);
	message.msg_type = 1;
	printf("Write data: ");
	fgets(message.msg_text, MAX, stdin);
	
	//msgsnd to send message
	msgsnd(msgid,&message, sizeof(message), 0);
	
	//display the message
	printf("Data send is: %s \n", message.msg_text);
return 0;
}

[2021ict112@fedora ~]$ gcc newsend.c -o newsend
[2021ict112@fedora ~]$ ./newsend
Write data: hi s
Data send is: hi s









//message receive file

[2021ict112@fedora ~]$ touch newreceive.c
[2021ict112@fedora ~]$ vi newreceive.c

#include <stdio.h>
#include <sys/ipc.h>
#include <sys/msg.h>

//structure for message queue
struct msg_buffer{
	long msg_type;
	char msg_text[100];
}message;

int main(){
	key_t key;
	int msgid;

	//ftok to generate the unique key
	key = ftok("/tmp/75progfile", 122);
	
	//msgget creates a message queue and returns identifier
	msgid = msgget(key, 0666 | IPC_CREAT);
	
	//msgrcv recive message
	msgrcv(msgid,&message, sizeof(message), 1,  0);
	
	//display the message
	printf("Data received is: %s \n", message.msg_text);
	
	//to destroy the message
	msgctl(msgid, IPC_RMID, NULL);
return 0;	
}

[2021ict112@fedora ~]$ gcc newreceive.c -o newreceive
[2021ict112@fedora ~]$ ./newreceive
Data received is: hi s



//Example 02:
/*
IPC using Message Queue

read inputs from the parent process
Enter name: hi
Enter Reg no: 2314
Enter Age:24

Message Successfully!

give the output from the child process

Received name: hi
Received reg no: 2314
Received Age:24
*/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>

#define MAX 100

// Structure for the message queue
struct msg_buffer {
    long msg_type; 
    char name[MAX];
    char regno[MAX];
    int age;
};

int main() {
    key_t key;
    int msgid;

    // Generate a unique key
    key = ftok("/tmp/75progfile", 65);
    if (key == -1) {
        perror("ftok");
        exit(1);
    }

    // Create the message queue
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget");
        exit(1);
    }

    struct msg_buffer message;
    message.msg_type = 1;

    pid_t pid = fork();

    if (pid < 0) {
        perror("fork");
        exit(1);
    }

    // Parent process: input and send
    if (pid > 0) {
        printf("Enter Name: ");
        fgets(message.name, MAX, stdin);
        message.name[strcspn(message.name, "\n")] = 0; // Remove newline

        printf("Enter RegNo: ");
        fgets(message.regno, MAX, stdin);
        message.regno[strcspn(message.regno, "\n")] = 0;

        printf("Enter Age: ");
        scanf("%d", &message.age);

        // Send message
        if (msgsnd(msgid, &message, sizeof(struct msg_buffer) - sizeof(long), 0) == -1) {
            perror("msgsnd");
            exit(1);
        }

        printf("\nMessage sent Successfully!\n");
    }

    // Child process: receive and print
    else {
        // Receive message
        if (msgrcv(msgid, &message, sizeof(struct msg_buffer) - sizeof(long), 1, 0) == -1) {
            perror("msgrcv");
            exit(1);
        }

        printf("\nReceived Name: %s\n", message.name);
        printf("Received RegNo: %s\n", message.regno);
        printf("Received Age: %d\n", message.age);

        // Destroy the queue after use
        msgctl(msgid, IPC_RMID, NULL);
    }

    return 0;
}
