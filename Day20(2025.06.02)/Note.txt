/*
Shared Memory 
Shared memory is Shared memory is a technique used in computing
where multiple processes can access and use the same memory space to exchange data efficiently.


      ................
      .    Memory    .
	  ................
	  .    P1        .  Writer send message  
      ................  
	  .	Adress Space .  Doing for both(write and read) - managing and organizing memory access for multiple processes.
	  ................
      .    P2        .  Reader send message
      ................    
	  . (Print msg)  .
	  ................
      .  Kernal		 .  Doing send and receive
      ................

You must use this type for create a file:
touch shmfile	  
chmod 644 shmfile  
	 
	 
*/


//Example 01:  

//writer process1

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024    //Size of shared memory segment

int main()
{
	key_t key = ftok("shmfile", 112); //Generate unique key 
	int shmid=shmget(key,SHM_SIZE,IPC_CREAT |0666);  //Create shared memory 
	
	if(shmid == -1)
	{
		perror("shmget");
		exit(1);
	}
	
	char *shmaddr =(char*)shmat(shmid,NULL,0); //Attach to shared memory
	if(shmaddr == (char*) -1)
	{
		perror("shmat");
		exit(1);
	}
	
	printf("Write Data:");
	fgets(shmaddr, SHM_SIZE, stdin); //write data to shared memory
	
	printf("Data written in memory: %s \n" , shmaddr);
	
	shmdt(shmaddr);  //Detach from shared memory
	
	return 0;
}

//Reader

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>

#define SHM_SIZE 1024    //Size of shared memory segment

int main()
{
	key_t key = ftok("shmfile", 112); //Generate unique key 
	int shmid=shmget(key,SHM_SIZE, IPC_CREAT |0666);  //Access shared memory segmant
	
	if(shmid == -1)
	{
		perror("shmget");
		exit(1);
	}
	
	char *shmaddr = (char*) shmat(shmid, NULL, 0);  //Attach to shared memory
	if(shmaddr == (char*) -1)
	{
		perror("shmat");
		exit(1);
	}
	

	
	printf("Data read from memory: %s \n" , shmaddr);
	
	shmdt(shmaddr);  //Detach from shared memory
	
	shmctl(shmid, IPC_RMID , NULL);  //Remove shared memory
	
	return 0;
}


//Example 02:

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/wait.h>

int main() {
    size_t size = 4096;
    char *shared_mem = mmap(NULL, size, PROT_READ | PROT_WRITE,
	MAP_SHARED | MAP_ANONYMOUS, -1, 0);
    if (shared_mem == MAP_FAILED) {
        perror("mmap failed");
        exit(1);
    }

    pid_t pid = fork();
    if (pid == 0) {
        // Child process
        sprintf(shared_mem, "Hello from child!");
        printf("Child wrote: %s\n", shared_mem);
        exit(0);
    } else if (pid > 0) {
        // Parent process
        wait(NULL); // Wait for child to finish
        printf("Parent read: %s\n", shared_mem);
        munmap(shared_mem, size);
    } else {
        perror("fork failed");
        exit(1);
    }

    return 0;
}
