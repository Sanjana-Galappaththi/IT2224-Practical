//Home Work

#include<stdio.h>
#include<unistd.h>
#include <sys/wait.h>
int main()
{
	int num;
	printf("Enter a number:");
	scanf("\n%d",&num);
	
	int f1=fork();
	if(f1==0)
	{
		printf("\nC1");
		printf("\nParent Id:%d",getppid());
		int factorial=1;
		for(int i=1;i<=num;i++)
		{
			factorial=factorial*i;
		}
		printf("\nFactorial of first number:%d",factorial);
		
	}
	
	else
	{
		printf("\nP");
		printf("\n Id:%d",getpid());
		
		int f2=fork();
		if(f2==0)
		{
			printf("\nC2");
		    printf("\nParent Id:%d",getppid());
			int power = 1;
            for (int i = 0; i < num; i++) {
                power *= 2;
            }
            printf("2 raised to the power %d: %d\n", num, power);

			
		}
		
		else
		{
			int f3=fork();
			if(f3==0)
			{
			printf("\nC3");
		    printf("\nParent Id:%d",getppid());
			int square = num * num;
            printf("Square of %d (calculated by c3): %d\n", num, square);
			}
			
			else
			{
				printf("Parent P (PID %d)\n", getpid());

                
                wait(NULL);
                wait(NULL);
                wait(NULL);
			}
		}
	}
	
	
}

//Example 01:

[2021ict112@fedora ~]$ touch exmp1.c
[2021ict112@fedora ~]$ vi exmp1.c

#include<stdio.h>
#include<stdlib.h> //for exit()
#include<unistd.h> //for sleep()

int main()
{
	printf("Program started.\n");
	
	
	printf("Sleeping for 3 seconds...\n");
	sleep(3); //pause for 3 seconds 
	
	
	printf("Exiting the program...\n");
    exit(0); //clean exit 
	
	return 0;
} 
	
[2021ict112@fedora ~]$ gcc exmp1.c -o exmp1
[2021ict112@fedora ~]$ ./exmp1
Program started.
Sleeping for 3 seconds...
Exiting the program...


//Example 02



[2021ict112@fedora ~]$ touch exmp2.c
[2021ict112@fedora ~]$ vi exmp2.c

#include<stdio.h>
#include<stdlib.h>   //for exit
#include<unistd.h>   //for fork(), for sleep()
#include<sys/wait.h> //for wait

int main()
{
	pid_t pid;
	
	printf("Parent process started.PID : %d\n", getpid());
	
	pid=fork();//create a new child process
	
	if(pid<0)
	{
		perror("fork failed");
		exit(1);
	}
	
	if(pid == 0)
	{
		//child process
		printf("Child process. PID: %d, sleeping for 2 seconds...");
		sleep(2);
		printf("Child process exiting.\n");
		exit(0);//child exits with status 0
	}
	
	else
	{
		//Parent process
		int status;
		printf("parent waiting for child to finish..\n");
		wait(&status); //wait for child to finish
		
		if(WIFEXITED(status))
		{
			printf("Child exited with status: %d\n", WEXITSTATUS(status));
		}
		else
		{
			printf("Child did not exit normally.\n");
			
		}
		
		printf("Parent process ending.\n");
	}
		
	return 0;
}

	


[2021ict112@fedora ~]$ gcc exmp2.c -o exmp2
[2021ict112@fedora ~]$ ./exmp2

Parent process started.PID : 596953896
, getpid()parent waiting for child to finish..
, getpid()Child process. PID: 0, sleeping for 2 seconds...Child process exiting.
Child exited with status: 0
Parent process ending.


//Example 03:

//First Child: Slept for 1 second.
//Second Child: Slept for 3 seconds.
//Parent: Both children have finished.

[2021ict112@fedora ~]$ vi exmp3.c

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/wait.h>

int main()
{
	pid_d pid;
	
	printf("Parent process started... PID: %d\n", getpid());
	
	int f1=fork();
	
	if(f1==0)
	{ 
       printf("Child process. PID: %d, sleeping for 1 seconds...\n", getpid());
		sleep(1);
		printf("Child process exiting.\n");
		exit(0);
		
	}
	
	else
	{
		int f2=fork();
		if(f2==0)
		{
			
        printf("Child process. PID: %d, sleeping for 3 seconds...\n", getpid());
		sleep(3);
		printf("Child process exiting.\n");
		exit(0);
		}
		
		else
		{
		int status;
		printf("parent waiting for child to finish..\n");
		wait(&status); //wait for child to finish
		
		if(WIFEXITED(status))
		{
			printf("Child exited with status: %d\n", WEXITSTATUS(status));
		}
		else
		{
			printf("Child did not exit normally.\n");
			
		}
		
		printf("Parent process ending.\n");
	}
		
	return 0;
}
		
		
[2021ict112@fedora ~]$ gcc exmp3.c -o exmp3
[2021ict112@fedora ~]$ ./exmp3
Parent process started... PID: 13296
parent waiting for child to finish..
Child process. PID: 13297, sleeping for 1 seconds...
Child process. PID: 13298, sleeping for 3 seconds...
Child process exiting.
Child exited with status: 0
Parent process ending.
	

//Example 04:
// First Child: Sleeps for 2 seconds, exits with  status
// Second Child: Sleeps for 1 seconds, exits with status 1
// Parent : waits twice and prints which child (by pid or exit code)
//finish first and second

[2021ict112@fedora ~]$ touch exmp4.c
[2021ict112@fedora ~]$ vi exmp4.c

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    pid_t pid1, pid2;
    int status1, status2;

    // Create the first child process
    pid1 = fork();
    if (pid1 == 0) {
        // Child 1: Sleeps for 2 seconds and exits with status 0
        sleep(2);
        printf("Child 1 (PID: %d) is exiting with status 0\n", getpid());
        exit(0);
    } else if (pid1 < 0) {
        // handling Error
        perror("Fork failed for child 1");
        exit(1);
    }

    // Create the second child process
    pid2 = fork();
    if (pid2 == 0) {
        // Child 2: Sleeps for 1 second and exits with status 1
        sleep(1);
        printf("Child 2 (PID: %d) is exiting with status 1\n", getpid());
        exit(1);
    } else if (pid2 < 0) {
        // Error handling if fork fails
        perror("Fork failed for child 2");
        exit(1);
    }

    // Parent: Wait for both children and print which child finishes first
    // Wait for the first child
    pid_t finished_pid = waitpid(pid1, &status1, 0);
    if (finished_pid > 0) {
        printf("Parent: Child with PID %d finished first with status %d\n", finished_pid, WEXITSTATUS(status1));
    }

    // Wait for the second child
    finished_pid = waitpid(pid2, &status2, 0);
    if (finished_pid > 0) {
        printf("Parent: Child with PID %d finished second with status %d\n", finished_pid, WEXITSTATUS(status2));
    }

    return 0;
}

[2021ict112@fedora ~]$ gcc exmp4.c -o exmp4
[2021ict112@fedora ~]$ ./exmp4
Child 2 (PID: 14604) is exiting with status 1
Child 1 (PID: 14603) is exiting with status 0
Parent: Child with PID 14603 finished first with status 0
Parent: Child with PID 14604 finished second with status 1







//Example 05:
//the parent creates a child process
//the child creates a grandchild process
//the grand cbild sleeps 2 seconds and exit with status 2
//the child waits for the grand child, prints its exit status
//then exits with status

[2021ict112@fedora ~]$ touch exmp5.c
[2021ict112@fedora ~]$ vi exmp5.c

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>

int main() {
    pid_t pid_child, pid_grandchild;
    int status_grandchild;

    // Create the child process
    pid_child = fork();

    if (pid_child == 0) {
        // Inside child process

        // Create the grandchild process
        pid_grandchild = fork();

        if (pid_grandchild == 0) {
            // Inside grandchild process
            // Sleep for 2 seconds and exit with status 2
            sleep(2);
            printf("Grandchild (PID: %d) is exiting with status 2\n", getpid());
            exit(2);
        } else if (pid_grandchild < 0) {
            // Error handling if fork fails for grandchild
            perror("Fork failed for grandchild");
            exit(1);
        }

        // Inside child process, waiting for grandchild to finish
        waitpid(pid_grandchild, &status_grandchild, 0);

        // Print the grandchild's exit status
        printf("Child (PID: %d) waited for grandchild (PID: %d) with exit status %d\n", getpid(), pid_grandchild, WEXITSTATUS(status_grandchild));

        // Child exits with status 1 (or any status of your choice)
        exit(1);
    } else if (pid_child < 0) {
        // Error handling if fork fails for child
        perror("Fork failed for child");
        exit(1);
    }

    // Parent process does not wait for the child here (optional, can wait if needed)
    return 0;
}



[2021ict112@fedora ~]$ gcc exmp5.c -o exmp5
[2021ict112@fedora ~]$ ./exmp5
[2021ict112@fedora ~]$ Grandchild (PID: 14960) is exiting with status 2
Child (PID: 14959) waited for grandchild (PID: 14960) with exit status 2



